name: Build and Deploy Qt EXE using aqtinstall (dynamic spec)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1) Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Debug workspace
      - name: Debug workspace
        shell: pwsh
        run: |
          Write-Host "üîç Current directory:"; Get-Location
          Write-Host "üì¶ Files in workspace:"; Get-ChildItem -Recurse -Force | Select-Object FullName

      # 3) Install aqtinstall
      - name: Install aqtinstall
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install aqtinstall

      # 4) Download Qt via aqtinstall & discover spec dynamically
      - name: Download Qt and locate windeployqt
        shell: pwsh
        run: |
          # 4.1) Download Qt
          aqt install-qt windows desktop 6.8.3 win64_mingw --outputdir Qt
          
          $qtRoot = "${{ github.workspace }}\Qt\6.8.3"
          Write-Host "üîç Looking under $qtRoot for a spec folder containing bin\windeployqt.exe"

          # 4.2) List subfolders for debugging
          Get-ChildItem -Path $qtRoot -Directory | ForEach-Object { Write-Host " - Subdir:" $_.Name }

          # 4.3) Find the actual spec folder
          $spec = Get-ChildItem -Path $qtRoot -Directory `
                    | Where-Object { Test-Path (Join-Path $_.FullName 'bin\windeployqt.exe') } `
                    | Select-Object -First 1

          if (-not $spec) {
            Write-Error "‚ùå No spec folder with windeployqt.exe found under $qtRoot"
            exit 1
          }
          Write-Host "‚úÖ Found Qt spec folder:" $spec.Name

          # 4.4) Add its bin to PATH
          $qtBin = Join-Path $spec.FullName 'bin'
          Write-Host "üîß Adding Qt bin to PATH: $qtBin"
          "$qtBin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # 5) Build the project
      - name: Build test_0.pro with qmake + mingw32-make
        shell: pwsh
        run: |
          cd Packet_Versions/Packet1
          qmake test_0.pro CONFIG-=no_main CONFIG+=console
          mingw32-make

      # 6) Find the generated EXE
      - name: Find generated .exe
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse -Filter '*.exe' |
                 Where-Object { $_.FullName -notmatch 'windeployqt' } |
                 Select-Object -First 1

          if (-not $exe) {
            Write-Error "‚ùå No .exe found after build"
            exit 1
          }
          Write-Host "‚úÖ Found EXE at: $($exe.FullName)"
          "EXE_PATH=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 7) Deploy Qt dependencies
      - name: Deploy Qt dependencies with windeployqt
        shell: pwsh
        run: |
          $exePath = $env:EXE_PATH
          Write-Host "üöÄ Running windeployqt on $exePath"
          windeployqt $exePath

      # 8) Upload as artifact
      - name: Upload built files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployed-exe-with-dlls
          path: |
            **/*.exe
            **/*.dll
